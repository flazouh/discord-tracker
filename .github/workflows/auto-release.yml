name: Auto Release

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.github/workflows/auto-release.yml'

jobs:
  auto-release:
    # Skip if commit message contains [skip actions]
    if: "!contains(github.event.head_commit.message, '[skip actions]')"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build action
        run: bun run build

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Bump patch version
        id: new-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"
          
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Bump patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version from $CURRENT_VERSION to $NEW_VERSION"

      - name: Update package.json version
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          npm version $NEW_VERSION --no-git-tag-version
          echo "Updated package.json to version $NEW_VERSION"

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip actions]"
          git push origin main

      - name: Create and push tag
        run: |
          TAG_VERSION="${{ steps.new-version.outputs.tag_version }}"
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          
          git tag -a $TAG_VERSION -m "Release $TAG_VERSION"
          git push origin $TAG_VERSION
          echo "Created and pushed tag: $TAG_VERSION"

      - name: Update latest tag
        run: |
          TAG_VERSION="${{ steps.new-version.outputs.tag_version }}"
          git tag -f latest $TAG_VERSION
          git push origin latest --force
          echo "Updated latest tag to point to $TAG_VERSION"

      - name: Create GitHub release
        run: |
          TAG_VERSION="${{ steps.new-version.outputs.tag_version }}"
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          
          # Generate release notes
          RELEASE_NOTES="## What's Changed\n\n- Automated release for version $NEW_VERSION\n- Discord Pipeline Tracker GitHub Action\n- Real-time CI/CD pipeline tracking in Discord\n- Support for pipeline initialization, step updates, completion, and failure handling\n\n## Version\n- **Version:** $NEW_VERSION\n- **Tag:** $TAG_VERSION\n\n## Usage\n\n\`\`\`yaml\n- uses: flazouh/discord-tracker@$TAG_VERSION\n  with:\n    action: 'init'\n    pr_number: \${{ github.event.number }}\n    discord_bot_token: \${{ secrets.DISCORD_BOT_TOKEN }}\n    discord_channel_id: \${{ secrets.DISCORD_CHANNEL_ID }}\n\`\`\`"
          
          # Create release
          gh release create $TAG_VERSION \
            --title "Release $TAG_VERSION" \
            --notes "$RELEASE_NOTES" \
            --target main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify completion
        run: |
          TAG_VERSION="${{ steps.new-version.outputs.tag_version }}"
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          echo "üéâ Successfully created release $TAG_VERSION!"
          echo "üì¶ Version: $NEW_VERSION"
          echo "üè∑Ô∏è  Tag: $TAG_VERSION"
          echo "üìù Release notes generated automatically" 