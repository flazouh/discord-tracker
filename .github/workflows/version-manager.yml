name: Version Manager

on:
  push:
    branches: [main]

jobs:
  sync-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get version from Cargo.toml
        id: version
        run: |
          # Extract major version from Cargo.toml
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
          MAJOR_VERSION=$(echo $CARGO_VERSION | cut -d'.' -f1)
          VERSION="v$MAJOR_VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "cargo_version=$CARGO_VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION (from Cargo.toml version: $CARGO_VERSION)"

      - name: Check if version branch exists
        id: branch-check
        run: |
          if git ls-remote --heads origin ${{ steps.version.outputs.version }} | grep -q ${{ steps.version.outputs.version }}; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version branch ${{ steps.version.outputs.version }} exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version branch ${{ steps.version.outputs.version }} does not exist"
          fi

      - name: Create or update version branch
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          if [ "${{ steps.branch-check.outputs.exists }}" = "false" ]; then
            echo "Creating new version branch: $VERSION"
            git checkout -b $VERSION
            git push origin $VERSION
          else
            echo "Updating existing version branch: $VERSION"
            git checkout $VERSION
            git merge main --no-edit
          fi

      - name: Push version branch
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git push origin $VERSION
          echo "âœ… Successfully pushed $VERSION branch"

      - name: Create or update release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          CARGO_VERSION="${{ steps.version.outputs.cargo_version }}"
          
          # Check if release already exists
          if gh release view $VERSION &>/dev/null; then
            echo "Updating existing release: $VERSION"
            gh release edit $VERSION \
              --title "Release $VERSION" \
              --notes "Automated release for Discord Tracker Action v$CARGO_VERSION" \
              --target $VERSION
          else
            echo "Creating new release: $VERSION"
            gh release create $VERSION \
              --title "Release $VERSION" \
              --notes "Automated release for Discord Tracker Action v$CARGO_VERSION" \
              --target $VERSION
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify completion
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          CARGO_VERSION="${{ steps.version.outputs.cargo_version }}"
          echo "ðŸŽ‰ Version $VERSION has been successfully synchronized!"
          echo "ðŸ“¦ Cargo version: $CARGO_VERSION"
          echo "ðŸ“¦ Docker build will be triggered automatically"
          echo "ðŸ§ª Integration tests will run after build completion" 